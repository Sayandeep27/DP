class Solution {
public:

    int getAns(vector<int>& Arr, int n, int ind, int buy, int cap, vector<vector<vector<int>>>& dp ){

    if(ind==n || cap==0) return 0; //base case
    
    if(dp[ind][buy][cap]!=-1)
        return dp[ind][buy][cap];
        
    int profit;
    
    if(buy==0){// We can buy the stock
        profit = max(0+getAns(Arr,n,ind+1,0,cap,dp), 
                    -Arr[ind] + getAns(Arr,n,ind+1,1,cap,dp));
    }
    
    if(buy==1){// We can sell the stock
        profit = max(0+getAns(Arr,n,ind+1,1,cap,dp),
                    Arr[ind] + getAns(Arr,n,ind+1,0,cap-1,dp));
    }
    
    return dp[ind][buy][cap] = profit;
}


    int maxProfit(int k,vector<int>& prices) {

         int n=prices.size();
         
         // Creating a 3d - dp of size [n][2][k+1]
    vector<vector<vector<int>>> dp(n,
                                    vector<vector<int>> 
                                            (2,vector<int>(k+1,-1)));
    
    return getAns(prices,n,0,0,k,dp);


       
    }
};





-------------------------------------------- Tabulation -----------------------------------------------------------------------------------------


class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        
        int n=prices.size();

        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(k+1,0)));

        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=k;cap++)
                {
                    if(buy==0) // we can buy the stock
                    {
                        // take
                        int take=-prices[i]+dp[i+1][1][cap];

                        // not_take
                        int not_take=dp[i+1][0][cap];

                        dp[i][buy][cap]=max(take,not_take);


                    }
                    else  // we can sell the stock
                    {
                        // take
                        int take=prices[i]+dp[i+1][0][cap-1];

                        // not take
                        int not_take=dp[i+1][1][cap];

                         dp[i][buy][cap]=max(take,not_take);


                    }
                }
            }
        }


        return dp[0][0][k];
        
    }
};
