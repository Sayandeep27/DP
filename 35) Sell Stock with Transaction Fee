class Solution {
public:


   int solve(int i,int buy,int fee,vector<int>&prices,vector<vector<int>>&dp)
   {
       int n=prices.size();

       // base case

       if(i>=n) return 0;
      
       if(dp[i][buy]!=-1) return dp[i][buy];

       if(buy==0)  // we have to buy
       {
           int not_pick=solve(i+1,0,fee,prices,dp);
           int pick=-prices[i]+solve(i+1,1,fee,prices,dp);

           return dp[i][buy]=max(pick,not_pick);
       }
       else  // we have to sell
       {
            int not_pick=solve(i+1,1,fee,prices,dp);

            int pick=prices[i]-fee+solve(i+1,0,fee,prices,dp);

            return dp[i][buy]=max(pick,not_pick);
       }
   }


    int maxProfit(vector<int>& prices, int fee) {
           
          int n=prices.size();

          int buy=0; // we have to buy


           vector<vector<int>>dp(n+1,vector<int>(2,-1));

          return solve(0,buy,fee,prices,dp);

    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
           

           int n=prices.size();

           vector<vector<int>>dp(n+1,vector<int>(2,0));

           for(int i=n-1;i>=0;i--)
           {
               for(int buy=0;buy<=1;buy++)
               {
                   if(buy==0) // we can buy the stock
                   {
                       // take
                       int take=-prices[i]+dp[i+1][1];

                       // not take
                       int not_take=dp[i+1][0];

                       dp[i][buy]=max(take,not_take);
                   }
                   else // we can sell the stock
                   {
                         // take
                         int take=prices[i]-fee+dp[i+1][0];

                         // not take
                         int not_take=dp[i+1][1];

                         dp[i][buy]=max(take,not_take);

                   }
               }
           }


          return dp[0][0];

    }
};
