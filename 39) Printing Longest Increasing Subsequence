vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        
        vector<int>ans;
        
        
        vector<int>dp(n,1);
        vector<int>parent(n);
        
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
            
            for(int prev=0;prev<i;prev++)
            {
                if(arr[i]>arr[prev] and 1+dp[prev]>dp[i])
                {
                    dp[i]=1+dp[prev];
                    
                    parent[i]=prev;
                }
            }
        }
        
        
        
        int maxi=-1,lastindex=-1;
        
        for(int i=0;i<n;i++)
        {
            if(dp[i]>maxi)
            {
                maxi=dp[i];
                lastindex=i;
            }
        }
        
        
        ans.push_back(arr[lastindex]);
        
        while(parent[lastindex]!=lastindex)
        {
            lastindex=parent[lastindex];
            ans.push_back(arr[lastindex]);
        }
        
        
         reverse(ans.begin(),ans.end());
        
        return ans;
        
        
    }
