#include <bits/stdc++.h> 

int f(int index,int target,vector<int>&nums,vector<vector<int>>&dp)
{
    
    // base cases
    if(target==0) return 1;
    
    if(index==0) return nums[index]==target;
    
    if(dp[index][target]!=-1) return dp[index][target];
   
    
    // not take
    
    int not_take=f(index-1,target,nums,dp);
    
    
    // take
    
    int take=0;
    
    if(nums[index]<=target)
    {
        take=f(index-1,target-nums[index],nums,dp);
    }
    
    
    return dp[index][target]=(take+not_take);
}


int findWays(vector<int> &nums, int target)
{
    // Write your code here.
    int n=nums.size();
    
    vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
    
    int ans=f(n-1,target,nums,dp);
    
    return ans;
}



--------------------------------Tabulation--------------------------------------------------------------------------------



#include <bits/stdc++.h> 

int findWays(vector<int> &num, int k)
{
    int n = num.size();

    vector<vector<int>> dp(n,vector<int>(k+1,0));
    
    for(int i=0; i<n; i++){
        dp[i][0] = 1;
    }
    
    if(num[0]<=k)
        dp[0][num[0]] = 1;
    
    for(int ind = 1; ind<n; ind++){
        for(int target= 1; target<=k; target++){
            
            int notTaken = dp[ind-1][target];
    
            int taken = 0;
                if(num[ind]<=target)
                    taken = dp[ind-1][target-num[ind]];
        
            dp[ind][target]= notTaken + taken;
        }
    }
    
    return dp[n-1][k];
    
}


-----------------------------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    bool canPartition(vector<int>& nums) {
        
        int n=nums.size();
        int sum=0;

        for(int i=0;i<n;i++) sum+=nums[i];

        if(sum%2!=0) return false;


       sum=sum/2;
       
       vector<vector<bool>>dp(n+1,vector<bool>(sum+1,false));

       for(int i=0;i<dp.size();i++)
       {
           for(int target=0;target<dp[0].size();target++)
           {
               if(i==0 and target==0)
               {
                   dp[i][target]=true;
               }
               else if(target==0)
               {
                   dp[i][target]=true;
               }
               else if(i==0)
               {
                   dp[i][target]=false;
               }
               else
               {

                   // not take

                   bool not_take=dp[i-1][target];



                   // take

                   bool take=false;
                   
                   if(nums[i-1]<=target)
                   {
                      take=dp[i-1][target-nums[i-1]];
                   }


                     dp[i][target]=(take or not_take);


               }
           }
       }
      
       return dp[n][sum];

    }
};
