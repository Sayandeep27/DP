#include <bits/stdc++.h> 

int f(int index,int target,vector<int>&nums,vector<vector<int>>&dp)
{
    
    // base cases
    if(target==0) return 1;
    
    if(index==0) return nums[index]==target;
    
    if(dp[index][target]!=-1) return dp[index][target];
   
    
    // not take
    
    int not_take=f(index-1,target,nums,dp);
    
    
    // take
    
    int take=0;
    
    if(nums[index]<=target)
    {
        take=f(index-1,target-nums[index],nums,dp);
    }
    
    
    return dp[index][target]=(take+not_take);
}


int findWays(vector<int> &nums, int target)
{
    // Write your code here.
    int n=nums.size();
    
    vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
    
    int ans=f(n-1,target,nums,dp);
    
    return ans;
}
