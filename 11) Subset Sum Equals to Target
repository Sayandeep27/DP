
bool f(int i,int target,vector<int>&arr,vector<vector<int>>&dp)
{
    if(target==0) return true;
    
    if(i==0) return arr[i]==target;
    
    if(dp[i][target]!=-1) return dp[i][target];
    
    // nottake 
    bool nottake=f(i-1,target,arr,dp);
    
    bool take=false;
    
    if(arr[i]<=target)
    {
        take=f(i-1,target-arr[i],arr,dp);
    }
    
    dp[i][target]=(take or nottake);
    
    return dp[i][target];
    
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    
    bool ans=f(n-1,k,arr,dp);
    
    return ans;
}



--------------------------------Tabulation-------------------------------------------------------------------



bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        
    
        
        int n=arr.size();
        
        vector<vector<bool>>dp(n+1,vector<bool>(sum+1,false));
        
        
        // base cases
        
        for(int i=0;i<n;i++)
        {
            dp[i][0]=true;
        }
        
        
        dp[0][arr[0]]=true;
        
        
        for(int i=1;i<n;i++)
        {
            for(int target=1;target<=sum;target++)
            {
                
                // not take
                bool not_take=dp[i-1][target];
                
                
                // take
                
                bool take=false;
                
                if(arr[i]<=target)
                {
                    take=dp[i-1][target-arr[i]];
                }
                
                dp[i][target]=(take or not_take);
                
                
            }
        }
        
        return dp[n-1][sum];
        
        
    }
