
#include <bits/stdc++.h> 



int knapsack(vector<int> weight, vector<int> value, int n, int maxw) 
{
   
     vector<vector<int>>dp(n+1,vector<int>(maxw+1,0));



     for(int i=0;i<dp.size();i++)
     {
         for(int j=0;j<dp[0].size();j++)
         {

            if(i==0 and j==0)
            {
                dp[i][j]=0;
            }
            else if(j==0)
            {
                dp[i][j]=0;
            }
            else if(i==0)
            {
                 dp[i][j]=0;
            }
            else
            {

                 // not take
                 int not_take=dp[i-1][j];



                 // take
                 int take=INT_MIN;

                 if(weight[i-1]<=j)
                 {
                     take=value[i-1]+dp[i-1][j-weight[i-1]];
                 }



                 dp[i][j]=max(take,not_take);



            }


         }
     }
    
       
       return dp[n][maxw];

}


-----------------------------------------------------------------------------------------------------------------------------------------------


#include <bits/stdc++.h> 

#include <bits/stdc++.h> 

int f(int i,int target,vector<int>&nums,vector<vector<int>>&dp)
{
    // base cases
    if(target<0) return 0;
    
    if(i==-1)
    {
        if(target==0) return 1;
        else return 0;
    }
    
    if(dp[i][target]!=-1) return dp[i][target];
    
    
    // take
    int take=f(i-1,target-nums[i],nums,dp);
    
    // not take
    int not_take=f(i-1,target,nums,dp);
    
    dp[i][target] =take+not_take;
    
    return dp[i][target];
}

int findWays(vector<int> &nums, int target)
{
    // Write your code here.
    int n=nums.size();
    
    vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
    
    int ans=f(n-1,target,nums,dp);
    
    return ans;
}
