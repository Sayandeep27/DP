
	   int lcs(string &s,string &t)
	   {
	       int n=s.size();
	       int m=t.size();
	       
	       vector<vector<int>>dp(n+1,vector<int>(m+1,0));
	       
	       for(int i=0;i<=n;i++)
	       {
	           for(int j=0;j<=m;j++)
	           {
	               if(i==0 or j==0) dp[i][j]=0;
	               else if(s[i-1]==t[j-1]) dp[i][j]=1+dp[i-1][j-1];
	               else
	               {
	                   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
	               }
	           }
	       }
	       
	       
	       return dp[n][m];
	       
	   }
	   
	   
	   
	   set<string>st;
	   
	   
	   void solve(string s,string t,int i,int j,string &temp,vector<string>&ans,int cnt)
	   {
	       int n=s.size();
	       int m=t.size();
	       
	       if(cnt==0)
	       {
	           if(st.find(temp)==st.end())
	           {
	               st.insert(temp);
	               ans.push_back(temp);
	           }
	           
	           return;
	       }
	       
	       
	       if(i>=n or j>=m) return;
	       
	       for(int row=i;row<n;row++)
	       {
	         for(int col=j;col<m;col++)
	         {
	             if(s[row]==t[col])
	             {
	                 temp.push_back(s[row]);
	                 
	                 solve(s,t,row+1,col+1,temp,ans,cnt-1);
	                 
	                 temp.pop_back();
	             }
	         }
	       }
	        
	       
	       
	   }
	
	
	
		vector<string> all_longest_common_subsequences(string s, string t)
		{
		    // Code here
		    
		    int cnt=lcs(s,t);
		    
		    vector<string>ans;
		    
		    string temp="";
		    
		    solve(s,t,0,0,temp,ans,cnt);
		    
		    sort(ans.begin(),ans.end());
		    
		    
		    return ans;
		    
		    
		}
};
