class Solution {
  public:
    
    const int mod=1000000007;
    
    int f(int i,vector<int>&dp)
    {
        // base case
        if(i==0) return 0;
        if(i==1) return 1;
        
        if(dp[i]!=-1) return dp[i];
        
        return dp[i]=(f(i-1,dp)+f(i-2,dp))%mod;
    }
  
    int nthFibonacci(int n){
       
       
       vector<int>dp(n+1,-1);
       return f(n,dp);
       
    }
};


Time Complexity: O(N)
Space Complexity: O(N)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tabulation approach--------------------

 int FindMaxSum(int arr[], int n)
    {
        // Your code here
       
        vector<int>dp(n+1,-1);
        
        dp[0]=arr[0];
        
        for(int i=1;i<n;i++)
        {
            int pick=dp[i-2]+arr[i];
            
            int notpick=dp[i-1]+0;
            
            dp[i]=max(pick,notpick);
        }
       
       
       return dp[n-1];
       
       
    }

int main() {

  vector<int> arr{2,1,4,9};
  int n=arr.size();
  cout<<solve(n,arr);

}

Time Complexity: O(N)

Space Complexity: O(N)






























