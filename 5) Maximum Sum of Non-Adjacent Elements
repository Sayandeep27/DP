#include <bits/stdc++.h>

using namespace std;

int solveUtil(int ind, vector<int>& arr, vector<int>& dp){
    
    if(dp[ind]!=-1) return dp[ind];
    
    if(ind==0) return arr[ind];
    if(ind<0)  return 0;
    
    int pick= arr[ind]+ solveUtil(ind-2, arr,dp);
    int nonPick = 0 + solveUtil(ind-1, arr, dp);
    
    return dp[ind]=max(pick, nonPick);
}

int solve(int n, vector<int>& arr){
    vector<int> dp(n,-1);
    return solveUtil(n-1, arr, dp);
}


int main() {

  vector<int> arr{2,1,4,9};
  int n=arr.size();
  cout<<solve(n,arr);

}


Time Complexity: O(N)
Space Complexity: O(N)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tabulation approach--------------------

 int FindMaxSum(int arr[], int n)
    {
        // Your code here
       
        vector<int>dp(n+1,-1);
        
        dp[0]=arr[0];
        
        for(int i=1;i<n;i++)
        {
            int pick=dp[i-2]+arr[i];
            
            int notpick=dp[i-1]+0;
            
            dp[i]=max(pick,notpick);
        }
       
       
       return dp[n-1];
       
       
    }

int main() {

  vector<int> arr{2,1,4,9};
  int n=arr.size();
  cout<<solve(n,arr);

}

Time Complexity: O(N)

Space Complexity: O(N)






























