#include <bits/stdc++.h> 

int f(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
{
    // base cases
    if(i==0 and j==0) return grid[i][j];
    
    if(i<0 or j<0) return 1e9;
    
    if(dp[i][j]!=-1) return dp[i][j];
    
    
    int up=grid[i][j]+f(i-1,j,grid,dp);
    int left=grid[i][j]+f(i,j-1,grid,dp);
    
    dp[i][j]= min(up,left);
    
    return dp[i][j];
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    
    vector<vector<int>>dp(n,vector<int>(m,-1));
    
    int ans=f(n-1,m-1,grid,dp);
    
    return ans;
}




-----------------------------Tabulation----------------------------------------------------------




class Solution {
public:
  
  int minPathSum(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();

        vector<vector<int>>dp(n+1,vector<int>(m+1,0));

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 and j==0)
                {
                    dp[i][j]=grid[i][j];
                    continue;
                }

                int up=grid[i][j];
                int left=grid[i][j];

                if(i-1>=0)
                {
                    up+=dp[i-1][j];
                }
                else
                {
                    up+=1e9;
                }

                if(j-1>=0)
                {
                    left+=dp[i][j-1];
                }
                else
                {
                    left+=1e9;
                }

                dp[i][j]=min(up,left);
            }
        }

        return dp[n-1][m-1];
    }
};

