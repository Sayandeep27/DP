
int f(int index,int w,vector<int>&profit,vector<int>&weight,vector<vector<int>>&dp)
{
    
    // base case
    
    if(index==0)
    {
        return (w/weight[0])*profit[0];
    }
    
    
    if(dp[index][w]!=-1) return dp[index][w];
    
    // not take
    int not_take=0+f(index-1,w,profit,weight,dp);
    
    // take
    
    int take=INT_MIN;
    
    if(weight[index]<=w)
    {
        take=profit[index]+f(index,w-weight[index],profit,weight,dp);
    }
    
    return dp[index][w]=max(take,not_take);
    
    
}


int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    
    vector<vector<int>>dp(n+1,vector<int>(w+1,-1));
    
    int ans=f(n-1,w,profit,weight,dp);
    
    
    return ans;
}
