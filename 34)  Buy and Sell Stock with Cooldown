class Solution {
public:

    int solve(int i,int buy,vector<int>&prices,vector<vector<int>>&dp)
    {
       int n=prices.size();
       
        // base case
        if(i>=n) return 0;

        if(dp[i][buy]!=-1) return dp[i][buy];


        if(buy==0)  // we have to buy
        {
            int not_pick=solve(i+1,0,prices,dp);

            int pick=-prices[i]+solve(i+1,1,prices,dp);


            return dp[i][buy]=max(pick,not_pick);


        }
        else // we have to sell
        {
            int not_pick=solve(i+1,1,prices,dp);

            int pick=prices[i]+solve(i+2,0,prices,dp);


            return dp[i][buy]=max(pick,not_pick);

        }
    }
 


    int maxProfit(vector<int>& prices) {
          
          int n=prices.size();

          int buy=0; // 0 means buy and 1 means sell

          vector<vector<int>>dp(n+2,vector<int>(2,-1));


          return solve(0,buy,prices,dp);


    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int maxProfit(vector<int>& prices) {
         
        int n=prices.size();

        vector<vector<int>>dp(n+2,vector<int>(2,0));


        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                int profit;

                if(buy==0) // we can buy the stock
                {
                    // take
                     int take=-prices[i]+dp[i+1][1];

                    // not take
                    int not_take=dp[i+1][0];

                    profit=max(take,not_take);

                    dp[i][buy]=profit;

                }
                else  // we can sell the stock
                {
                    // take
                    int take=prices[i]+dp[i+2][0];
 
                    // not take
                    int not_take=dp[i+1][1];

                    profit=max(take,not_take);

                    dp[i][buy]=profit;

                }


            }
        } 
           
           return dp[0][0];

    }
};
