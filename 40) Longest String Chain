class Solution {
public:

    bool compare(string s1,string s2)
    {
        int n=s1.size();
        int m=s2.size();

        if(n!=m+1) return false;

        int cnt=0;

        int i=0,j=0;

        while(i<n and j<m)
        {
            if(s1[i]==s2[j])
            {
                i++;
                j++;
            }
            else
            {
                cnt++;
                i++;
            }

        }

       return cnt<=1;
    }
   
    static bool cmp(string s1,string s2)
    {
        return s1.size()<s2.size();
    }

    int longestStrChain(vector<string>& words) {
         
        int n=words.size();

        sort(words.begin(),words.end(),cmp);

        vector<int>dp(n,1);

        int ans=1;

        for(int i=0;i<n;i++)
        {
            for(int prev=0;prev<i;prev++)
            {
                if(compare(words[i],words[prev]) and dp[i]<1+dp[prev])
                {
                    dp[i]=1+dp[prev];
                }
            }
        }

        for(int i=0;i<n;i++)
        {
            ans=max(ans,dp[i]);
        }
        
         return ans;

    }
};
