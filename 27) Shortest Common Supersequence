#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to find the length of the LCS using memoization
int lcs(int i, int j, string &s1, string &s2, vector<vector<int>> &dp) 
{
    if (i == 0 || j == 0) return 0;

    if (dp[i][j] != -1) return dp[i][j];

    if (s1[i - 1] == s2[j - 1]) 
    {
        return dp[i][j] = 1 + lcs(i - 1, j - 1, s1, s2, dp);
    } 
    else 
    {
        return dp[i][j] = max(lcs(i - 1, j, s1, s2, dp), lcs(i, j - 1, s1, s2, dp));
    }
}



// Function to construct the SCS using the LCS length
string scs(string &s1, string &s2, vector<vector<int>> &dp) {
   
    int i = s1.size();
    int j = s2.size();
    string result;

    while (i > 0 && j > 0) 
    {
        if (s1[i - 1] == s2[j - 1]) 
        {
            result.push_back(s1[i - 1]);
            i--;
            j--;
        } 
        else if (dp[i - 1][j] > dp[i][j - 1]) 
        {
            result.push_back(s1[i - 1]);
            i--;
        } 
        else 
        {
            result.push_back(s2[j - 1]);
            j--;
        }
    }

    while (i > 0) 
    {
        result.push_back(s1[i - 1]);
        i--;
    }

    while (j > 0) 
    {
        result.push_back(s2[j - 1]);
        j--;
    }

    reverse(result.begin(), result.end());
    return result;
}

int main() {
    string s1 = "abcde";
    string s2 = "bdgek";
    
    int n = s1.size();
    int m = s2.size();

    vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));

    // Find the length of LCS
    lcs(n, m, s1, s2, dp);

    // Construct the SCS based on LCS
    string result = scs(s1, s2, dp);

    // Print the SCS
    cout << "Shortest Common Supersequence: " << result << endl;

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
string shortestSupersequence(string s1, string s2)
{
       // Write your code here.
    
  int n = s1.size();
  int m = s2.size();

  vector < vector < int >> dp(n + 1, vector < int > (m + 1, 0));
  for (int i = 0; i <= n; i++) {
    dp[i][0] = 0;
  }
  for (int i = 0; i <= m; i++) {
    dp[0][i] = 0;
  }

  for (int ind1 = 1; ind1 <= n; ind1++) {
    for (int ind2 = 1; ind2 <= m; ind2++) {
      if (s1[ind1 - 1] == s2[ind2 - 1])
        dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
      else
        dp[ind1][ind2] = 0 + max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
    }
  }

  int len = dp[n][m];
  int i = n;
  int j = m;

  int index = len - 1;
  string ans = "";

  while (i > 0 && j > 0) {
    if (s1[i - 1] == s2[j - 1]) {
      ans += s1[i-1];
      index--;
      i--;
      j--;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
        ans += s1[i-1];
        i--;
    } else {
        ans += s2[j-1];
        j--;
    }
  }
  
  //Adding Remaing Characters - Only one of the below two while loops will run 
  
  while(i>0){
      ans += s1[i-1];
      i--;
  }
  while(j>0){
      ans += s2[j-1];
      j--;
  }

  reverse(ans.begin(),ans.end());
  
  return ans;
}
