
class Solution {
public:

    int maxProfit(vector<int>& prices) {
         
         int n=prices.size();

         vector<vector<int>>dp(n+1,vector<int>(2,0));
 
         dp[n][0]=0;
         dp[n][1]=0;   // 0 means can buy the stock and 1 means can sell the stock 

         for(int i=n-1;i>=0;i--)
         {
             for(int buy=0;buy<=1;buy++)
             {
                if(buy==0) // we can buy the stock
                {
                    // take
                    int take=-prices[i]+dp[i+1][1];

                    // not take
                    int not_take=0+dp[i+1][0];

                    dp[i][buy]=max(take,not_take);
                }
                else  // we can sell the stock
                {

                    // take
                    int take=prices[i]+dp[i+1][0];

                    // not_take
                    int not_take=0+dp[i+1][1];

                    dp[i][buy]=max(take,not_take);

                }
             }
         }

       return dp[0][0];

    }
};




-------------------------------- MEMORIZATION----------------------------------------------------------------------------



class Solution {
public:


    int f(int i,int buy,vector<int>&prices,vector<vector<long>>dp)
    {
         int n=prices.size();
         
         // base case
         if(i==n)
         {
             return 0;
         }

         if(dp[i][buy]!=-1) return dp[i][buy];



        if(buy==1) 
        {
           // take
            int take=-prices[i]+f(i+1,0,prices,dp);


           // not take
           int not_take=0+f(i+1,1,prices,dp);

           return dp[i][buy]=max(take,not_take);


        }
        else
        {

            // take
            int take=prices[i]+f(i+1,1,prices,dp);


            // not take
            int not_take=0+f(i+1,0,prices,dp);

            return dp[i][buy]= max(take,not_take);


        }

       

       
      

    }



    int maxProfit(vector<int>& prices) {
        int n=prices.size();

        vector<vector<long>>dp(n+1,vector<long>(2,-1));


        // buy-1 means u can buy
        // buy-0 means u can't buy
         int buy=1;  // initially u have to buy

        int ans=f(0,buy,prices,dp);

        return ans;


    }
};
