class Solution {
public:
   
   int f(int i,int j,string &str1,string &str2,vector<vector<int>>&dp)
   {
    // base cases
    
    if(i<0) return j+1;
    
    if(j<0) return i+1;
    
    if(dp[i][j]!=-1) return dp[i][j];
    
    
    if(str1[i]==str2[j])
    {
        return dp[i][j]= 0+f(i-1,j-1,str1,str2,dp);
    }
    
   
      int op1=f(i-1,j-1,str1,str2,dp);
      int op2=f(i-1,j,str1,str2,dp);
      int op3=f(i,j-1,str1,str2,dp);


      return dp[i][j]=1+min(op1,min(op2,op3));  
   
   
   }


    int minDistance(string s1, string s2) {
        
       int n=s1.size();
       int m=s2.size();

       vector<vector<int>>dp(n+1,vector<int>(m+1,-1));

       int ans=f(n-1,m-1,s1,s2,dp);

       return ans;

    }
};



---------------------------------------------------- Tabulation-------------------------------------------------------------------------------------




int minDistance(string s1, string s2) {
        
       int n=s1.size();
       int m=s2.size();

       vector<vector<int>>dp(n+1,vector<int>(m+1,0));
       
         // base case

         for(int i=0;i<=n;i++)
         {
             for(int j=0;j<=m;j++)
             {
                 if(i==0)
                 {
                     dp[i][j]=j;
                 }
                 else if(j==0)
                 {
                      dp[i][j]=i;
                 }
             }
         }
       

       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=m;j++)
           {   
               
               if(s1[i-1]==s2[j-1])
               {
                   dp[i][j]=dp[i-1][j-1];
               }
               else
               {
                   dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
               }
           }
       }
       

       return dp[n][m];

    }
