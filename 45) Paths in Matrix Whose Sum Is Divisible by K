class Solution {
public:
    
    const int mod = 1e9+7;
    
    int f(int i,int j,vector<vector<int>>&grid,int k,int sum,vector<vector<vector<int>>>&dp)
    {
        // base case
        if(i==0 and j==0)
        {
          
            sum+=grid[i][j];
            if(sum%k==0) return 1;
            
            return 0;
        }
        
        if(i<0 or j<0) return 0;
        
        if(dp[i][j][sum%k]!=-1) return dp[i][j][sum%k];
        
        
        
        //sum+=grid[i][j];
        
        int left=f(i,j-1,grid,k,sum+grid[i][j],dp)%mod;
        
     
        
        int up=f(i-1,j,grid,k,sum+grid[i][j],dp)%mod;
        
        
        
        return dp[i][j][sum%k]=(left+up)%mod;
        
        
        
        
        
    }
    
    
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        
        int n=grid.size();
        int m=grid[0].size();
        
        int sum=0;
        
       // vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(m+1,vector<int>(k+1,-1)));
        
        return f(n-1,m-1,grid,k,sum,dp)%mod;
        
        
    }
};
