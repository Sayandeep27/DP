class Solution {
public:


  int f(int i,int buy,int cap,vector<int>&prices,vector<vector<vector<int>>>&dp)
  {

      int n=prices.size();

      // base case

      if(i==n or cap==0) return 0;

      if(dp[i][buy][cap]!=-1) return dp[i][buy][cap];



      if(buy==0)  // buy
      {
          int take=-prices[i]+f(i+1,1,cap,prices,dp);
          int not_take=0+f(i+1,0,cap,prices,dp);

          return dp[i][buy][cap]= max(take,not_take);
      }
      else   // sell
      {  

          int take=prices[i]+f(i+1,0,cap-1,prices,dp);
          int not_take=0+f(i+1,1,cap,prices,dp);

          return dp[i][buy][cap]=max(take,not_take);

      }




  }


    int maxProfit(vector<int>& prices) {

        int n=prices.size();

        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));


       int i=0;
       int cap=2;
       int buy=0;  // 0 means buy and 1 means sell

       return f(i,buy,cap,prices,dp);


       
    }
};








--------------------------------------------- Tabulation ------------------------------------------------------------------------



class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));

        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=2;cap++)
                {
                    if(buy==0)  // we can buy the stock
                    {

                       // take
                       int take=-prices[i]+dp[i+1][1][cap];


                       // not_take
                       int not_take=dp[i+1][0][cap];

                       dp[i][buy][cap]=max(take,not_take);


                    }
                    else       // we can sell the stock
                    {

                          // take
                          int take=prices[i]+dp[i+1][0][cap-1];

                          // not take
                          int not_take=dp[i+1][1][cap];

                         
                         dp[i][buy][cap]=max(take,not_take);


                    }
                }
            }
        }


        return dp[0][0][2];
    }
};
