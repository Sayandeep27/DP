
int f(int i,vector<int>&heights,vector<int>&dp)
{
    
    // base cases
    if(i==1) return 0;
    
    
    if(dp[i]!=-1) return dp[i];
    
    // one step
    int onestep=f(i-1,heights,dp)+abs(heights[i-1]-heights[i-2]);
    
    // two step
    int twostep=INT_MAX;
    
    if(i>2)
    {
        twostep=f(i-2,heights,dp)+abs(heights[i-1]-heights[i-3]);
    }
      
    return dp[i]= min(onestep,twostep);
    
}

int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n+1,-1);
    
    int ans=f(n,heights,dp);
    
    return ans;
}
  
  
  
  Time Complexity: O(N)
  Space Complexity: O(N)
  
  
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  
  Tabulation approach-----------------
  
  
  
  #include <bits/stdc++.h>

using namespace std;


int main() {

  vector<int> height{30,10,60,10,60,50};
  int n=height.size();
  vector<int> dp(n,-1);
  dp[0]=0;
  for(int ind=1;ind<n;ind++){
      int jumpTwo = INT_MAX;
        int jumpOne= dp[ind-1] + abs(height[ind]-height[ind-1]);
        if(ind>1)
            jumpTwo = dp[ind-2] + abs(height[ind]-height[ind-2]);
    
        dp[ind]=min(jumpOne, jumpTwo);
  }
  cout<<dp[n-1];
}



Time Complexity: O(N)

Space Complexity: O(N)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
