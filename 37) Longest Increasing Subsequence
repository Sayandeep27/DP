class Solution {
public:

    int f(vector<int>&nums,int n,int i,int prev_i,vector<vector<int>>&dp)
    {
         // base case

         if(i==n) return 0;

         if(dp[i][prev_i + 1]!=-1) return dp[i][prev_i + 1];


         int not_take=0+f(nums,n,i+1,prev_i,dp);


         int take=0;


         if(prev_i==-1 or nums[i]>nums[prev_i])
         {
             take=1+f(nums,n,i+1,i,dp);
         }



         return dp[i][prev_i + 1]=max(take,not_take);
     

    }



    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();

        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));


        return f(nums,n,0,-1,dp);
    }
};





---------------------------------------------- Binary Search -----------------------------------------------------------------------------


class Solution {
public:

   

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int>temp;
        temp.push_back(nums[0]);

        int len=1;

        for(int i=1;i<n;i++)
        {
            if(nums[i]>temp.back())
            {
                temp.push_back(nums[i]);
                len++;
            }
            else
            {
                int index=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin();

                temp[index]=nums[i];
            }
        }


        return len;
    }
};







